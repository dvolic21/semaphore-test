---
- name: Copy SSH key to remote hosts
  hosts: testing-machine
  gather_facts: no

  tasks:
    - name: Ensure SSH key exists
      stat:
        path: /root/.ssh/id_rsa.pub
      register: ssh_key
      delegate_to: localhost

    - name: Copy SSH key to remote hosts
      command: sshpass -p "{{ ansible_ssh_pass }}" ssh-copy-id -i /root/.ssh/id_rsa.pub {{ ansible_user }}@{{ ansible_host }}
      when: ssh_key.stat.exists
      delegate_to: localhost

- name: Installation of NRPE and Centreon enrollment
  hosts: testing-machine
  become: yes
  vars_files:
    - creds.yml
  tasks:
    - name: Installing Nagios-NRPE-Server
      apt:
        name: nagios-nrpe-server

    - name: Installing Nagios Plugins
      apt:
        name: nagios-plugins

    - name: Installing lm-sensors
      apt:
        name: lm-sensors

    - name: Copying configuration file
      copy: 
        src: /root/ubuntu/nrpe.cfg
        dest: /etc/nagios/nrpe.cfg
        mode: '0644' 

    - name: Creating NRPE folder
      file:
        path: /var/run/nrpe
        state: directory
        mode: '0755'
        
    - name: Creating pid file
      command: touch /var/run/nrpe/nrpe.pid
      register: createpid_output
      changed_when: createpid_output.rc != 0

    - name: Copying check_cpu_temp script
      copy:
        src: /root/ubuntu/check_cpu_temp
        dest: /usr/lib/nagios/plugins/check_cpu_temp
        mode: '0644'

    - name: Adding privileges to script
      file: dest=/usr/lib/nagios/plugins/check_cpu_temp mode=a+x

    - name: Changing owner of NRPE folder
      file:
         path: /var/run/nrpe
         owner: nagios
         group: nagios

    - name: Changing owner of pid file
      file:
         path: /var/run/nrpe/nrpe.pid
         owner: nagios
         group: nagios

    - name: Opening port 5666 for communication
      command: ufw allow 5666
      register: port_output
      changed_when: port_output.rc != 0

    - name: Restarting Nagios-NRPE-Service
      systemd:
         name: nagios-nrpe-server
         state: restarted

    - name: Authentication
      uri:
         method: POST
         url: "{{ centreon_auth_url }}"
         body: "username={{ centreon_user }}&password={{ centreon_password }}"
      register: login
      delegate_to: localhost

    - name: Setting authentication token for later use
      set_fact:
        auth_token: "{{ login.json.authToken }}"

    - name: Add host to Centreon configuration
      uri:
        method: POST
        headers:
          Content-Type: "application/json"
          centreon-auth-token: "{{ auth_token }}"
        url: "{{ centreon_api_url }}"
        body_format: json
        body:
          action: "add"
          object: "host"
          values: "{{ item }};{{ item }};{{ hostvars[item]['ansible_host'] }};custom-linux-server-verso;central;linux-servers"
      delegate_to: localhost
      loop: "{{ groups['testing-machine'] }}"

    - name: Add Current Users service
      uri:
        method: POST
        headers: 
          Content-Type: "application/json"
          centreon-auth-token: "{{ auth_token }}"
        url: "{{ centreon_api_url }}"
        body_format: json        
        body:
          action: "add"
          object: "service"
          values: "{{ inventory_hostname }};Current Users;Linux - Users"
      delegate_to: localhost
      
    - name: Add Load Avarage service
      uri:
        method: POST
        headers:
          Content-Type: "application/json"
          centreon-auth-token: "{{ auth_token }}"
        url: "{{ centreon_api_url }}"
        body_format: json
        body:
          action: "add"
          object: "service"
          values: "{{ inventory_hostname }};Load Avarage;Linux - Load Avarage"
      delegate_to: localhost

    - name: Add PING service
      uri:
        method: POST
        headers: 
          Content-Type: "application/json"
          centreon-auth-token: "{{ auth_token }}"
        url: "{{ centreon_api_url }}"
        body_format: json
        body:
          action: "add"
          object: "service"
          values: "{{ inventory_hostname  }};PING;Base-Ping-LAN-custom"
      delegate_to: localhost

    - name: Add Swap Usage service
      uri:
       method: POST
       headers:
         Content-Type: "application/json"
         centreon-auth-token: "{{ auth_token }}"
       url: "{{ centreon_api_url }}"
       body_format: json
       body:
         action: "add"
         object: "service"
         values: "{{ inventory_hostname }};Swap Usage;Linux - Swap Usage"
      delegate_to: localhost

    - name: Add Total Processes service
      uri:
       method: POST
       headers:
         Content-Type: "application/json"
         centreon-auth-token: "{{ auth_token }}"
       url: "{{ centreon_api_url }}"
       body_format: json
       body:
         action: "add"
         object: "service"
         values: "{{ inventory_hostname }};Total Processes;Linux - Total Processes"
      delegate_to: localhost

    - name: Add Zombie Processes service
      uri:
       method: POST
       headers:
         Content-Type: "application/json"
         centreon-auth-token: "{{ auth_token }}"
       url: "{{ centreon_api_url }}"
       body_format: json
       body:
         action: "add"
         object: "service"
         values: "{{ inventory_hostname }};Zombie Processes;Linux - Zombie Processes"
      delegate_to: localhost

    - name: Add Partition services
      uri:
       method: POST
       headers:
         Content-Type: "application/json"
         centreon-auth-token: "{{ auth_token }}"
       url: "{{ centreon_api_url }}"
       body_format: json
       body:
         action: "add"
         object: "service"
         values: "{{ inventory_hostname }};Part. {{ item.mount }};Linux - Part. {{ item.mount }}"
      delegate_to: localhost
      with_items:
        - "{{ ansible_mounts }}"

    - name: Apply configuration to Centreon
      command: "centreon -u {{ centreon_user }} -p {{ centreon_password }} -a APPLYCFG -v 1"
      delegate_to: lxp-centreon19.srv-lx.vag.local
      register: applyconf_output
      changed_when: applyconf_output.rc != 0

    - name: Print poller messages
      debug:
        msg: "{{ applyconf_output.stdout_lines }}"
